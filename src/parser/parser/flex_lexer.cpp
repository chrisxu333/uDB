#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 175
#define YY_END_OF_BUFFER 176
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1218] =
    {   0,
        0,    0,  172,  172,    2,    2,  176,  174,    4,    4,
      174,  174,  163,  170,  163,  163,  167,  163,  163,  163,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  163,  172,  173,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  158,    0,    1,    0,
      165,  164,  167,  160,  159,  157,  161,  169,  169,  169,

      169,  169,  169,  123,  169,  124,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      125,  169,  169,  126,  127,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  132,  169,  169,  128,  129,  130,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  131,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  162,  172,
      171,    2,    2,    2,    2,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  168,    0,  164,  111,
      169,  112,  169,  169,  113,  169,  114,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      136,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  115,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  116,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  117,  169,  169,  118,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  119,
      169,  169,  169,  120,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  121,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      122,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  169,  169,  169,  169,  169,  169,  169,
       82,  169,   83,   45,   84,  169,  169,  169,   85,  169,
      169,   86,  142,  169,  169,  169,  169,  169,   88,  169,
      169,  169,   89,   90,  169,  169,  169,  169,  169,  169,
      169,   91,  169,  169,   92,   93,  169,  169,   94,  169,
       95,  135,  169,  169,  169,  169,  169,  169,   96,  169,
       97,   98,   99,  169,  101,  169,  169,  102,  169,  169,
      169,  169,  169,  103,  169,  169,  169,  169,  169,  104,
      169,  169,   32,  169,  169,  169,  169,  169,  169,  169,

      169,  105,  154,  169,  169,  169,  169,  169,  106,  107,
       30,  169,  145,  169,  169,  169,  169,  169,  169,  169,
      169,  108,  169,  109,  169,  110,  138,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,   62,   63,  169,   64,  169,  148,  169,
      169,  169,  169,  169,  169,  169,   65,  169,  169,  169,
      169,  169,   66,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  146,   67,  169,  169,   68,  169,  141,
      100,  169,   69,   70,  169,  169,  169,  169,   71,   72,
      169,   73,   74,  169,  137,  169,  169,  169,  169,   75,

       76,  169,  169,  169,  169,  169,   77,  169,  169,  169,
      169,  152,  169,  169,  169,   78,  169,  169,  169,  169,
       79,  169,  169,  169,   80,  169,  169,  169,   81,  144,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  169,
       35,  169,  169,  169,   36,  150,  169,   37,  169,  169,
      169,  169,   38,  169,   39,  169,   40,   41,   42,  169,
       43,  169,  169,   46,   47,   48,   49,   50,  169,  169,
      169,   51,  155,  134,  143,  169,  153,  169,   52,  169,
      169,  169,   53,  169,  169,   54,  133,   55,  169,   56,
      169,   57,  169,  169,  169,  169,   58,   59,   60,   61,
      169,  169,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,   15,   16,   17,
      169,   18,   19,  169,  169,   31,   20,  169,  169,   21,
       22,   44,   23,  169,  169,  140,   24,  169,  169,   25,
       26,  169,  169,   27,  139,  169,   28,  169,  169,  169,
      169,   29,   34,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  169,   87,  169,   10,   11,  169,  151,   12,  169,
       13,  149,   33,  169,  169,  169,   14,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  169,  169,    7,  169,    8,
        9,  169,    2,    2,    2,    2,    2,    2,    2,    2,
        0,    0,    5,    6,  169,    2,    2,    2,    2,    2,
        0,    0,  147,    2,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,

        2,    2,    0,    0,    2,    2,    0,  156,    2,    2,
        0,    2,    0,    2,  166,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1225] =
    {   0,
        0,    0,  667,  649,   76,    0,  650, 4821,  151,  153,
      605,    0, 4821, 4821,  149,  148,  160,  159,  596,  570,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  317,  360,
      296,  221,  258,  171,  497,    0,  536,    0,  295,  308,
      515,  530,    0,    0,  317,  418,  429,  317,  513,  506,
      448,  524,  578,  630,  678,  730,  338,  436,  778,  339,
      321,  444,  510,  830,  878,  515,  431,  523,  928,  980,
      525,  580,  465,  433,  445,  343, 4821,  515, 4821,  505,
     1045, 1055, 1066, 4821, 4821, 4821, 4821,    0,  174,  253,

      346,  317,  284,  332,  567,    0,  355,  371,  578,  521,
      430,  621,  580,  355,  429,  438,  487,  528,  641,  522,
      525,  530,  552,  565,  570,  569,  573,  619,  588,  615,
        0,  628,  626,  675,  629,  638,  628,  653,  674,  695,
      660,  667,  677,  673,  714,  687,  699,  695,    0,  707,
      693,  714,  732,  738,  766,  734,  732,  738,  776,  780,
      740,  749,  768,  786,  787,  785,  788,  786,  784,  800,
      793,  829,  825,  825,  835,  833,  819,  840, 4821,    0,
     4821,    0,  360,    0,  509,    0,  485, 1076, 1086, 1097,
        0,    0,    0,    0,  849,  882,  868,  917,  893,  922,

      947,  977,  880, 1090, 1095, 1143,  923,  971, 1195,  968,
     1092, 1093, 1114, 1106, 1147, 1245, 1180, 1185, 1201, 1186,
     1224, 1230, 1253, 1258, 1274, 1129, 1239, 1269, 1293, 1299,
     1348, 1302, 1303, 1308, 1331, 1361, 1401, 1353, 1356, 1382,
     1405, 1415, 1407, 1416, 1444, 1325, 1450, 1431, 1455, 1465,
     1479, 1484, 1467, 1501, 1513, 1517, 1545, 1519, 1534, 1509,
     1567, 1573, 1569, 1558, 1571, 1575, 1603, 1617, 1608, 1625,
     1640, 1641, 1611, 1642, 1643,    0, 4821,  453, 1708,    0,
      837,    0,  839,  837,    0,  849,    0,  848,  866,  866,
      896, 1703,  933,  969,  979,  974,  976, 1003, 1080, 1096,

     1084, 1093, 1105, 1148, 1183, 1148, 1148, 1142, 1165, 1193,
     1208,    0, 1244, 1252, 1256, 1292, 1302, 1299, 1300, 1317,
     1331, 1335, 1352, 1364, 1380, 1363, 1383, 1407, 1444, 1487,
     1541, 1543, 1583, 1609, 1632, 1675, 1633, 1668,    0, 1663,
     1679, 1678, 1684, 1711, 1684, 1706, 1695, 1699, 1699,    0,
     1720, 1712, 1707, 1707, 1722, 1723, 1728, 1716, 1715, 1719,
     1722, 1735, 1717, 1730, 1729, 1737, 1729, 1740,    0, 1742,
     1739, 1750, 1755, 1750, 1753, 1762, 1759, 1756, 1763, 1773,
        0, 1765, 1776, 1765, 1768, 1783, 1771, 1765, 1785, 1768,
     1772, 1781, 1788, 1780,    0,  452, 1839, 1815, 1816, 1819,

     1832, 1833, 1834, 1845, 1837, 1873, 1851, 1869, 1870, 1888,
     1899, 1875, 1901, 1923, 1905, 1931, 1933, 1929, 1941, 1937,
     1959, 1973, 1972, 1977, 1981, 1983, 2012, 2007, 1995, 2011,
     2017, 2021, 2035, 2029, 2046, 2052, 2047, 2051, 2081, 2075,
     2089, 2100, 2106, 2105, 2111, 2115, 2129, 2137, 2139, 2155,
     2140, 2143, 2154, 2168, 2169, 2191, 2179, 2183, 2193, 2204,
     2222, 2223, 2232, 2237, 2247, 2245, 2255, 2253, 2258, 2276,
     2286, 2277, 2268, 2289, 2311, 2308, 2319, 2321, 2320, 2349,
     2350, 2359, 2353, 2351, 2364, 2361, 2363, 2382, 2385, 2393,
     2407, 2418, 2424, 2416, 2415, 2437, 2447, 2428, 2449, 2461,

     2473, 2491, 2458, 2490, 2506, 2507, 2504, 2521, 2472, 2536,
     2532, 2544,  449, 1798, 1834, 1829, 1838, 1894, 1931, 1962,
        0, 2027,    0,    0, 2061, 2055, 2065, 2072,    0, 2071,
     2077, 2165,    0, 2202, 2206, 2201, 2310, 2398, 2406, 2491,
     2494, 2533,    0,    0, 2532, 2535, 2531, 2540, 2562, 2564,
     2561,    0, 2550, 2573,    0,    0, 2579, 2566,    0, 2569,
        0, 2566, 2581, 2573, 2570, 2577, 2580, 2593,    0, 2587,
        0,    0,    0, 2582,    0, 2591, 2599,    0, 2600, 2595,
     2598, 2590, 2607,    0, 2614, 2614, 2602, 2605, 2611,    0,
     2627, 2633,    0, 2623, 2619, 2619, 2638, 2632, 2634, 2646,

     2647,    0,    0, 2641, 2649, 2647, 2652, 2643,    0,    0,
     2640, 2641,    0, 2659, 2651, 2647, 2668, 2650, 2664, 2668,
     2666,    0, 2656,    0, 2673,    0, 2663,  448, 2685, 2688,
     2683, 2686, 2689, 2711, 2694, 2697, 2722, 2707, 2719, 2752,
     2743, 2753, 2761, 2740, 2756, 2777, 2792, 2762, 2786, 2794,
     2795, 2810, 2827, 2831, 2828, 2836, 2859, 2845, 2849, 2862,
     2870, 2864, 2895, 2898, 2903, 2885, 2904, 2913, 2938, 2916,
     2919, 2948, 2953, 2927, 2967, 2952, 2969, 2957, 2988, 2978,
     2993, 3009, 3017, 3007, 3011, 3012, 3021, 3023, 3047, 3051,
     3053, 3052, 3055, 3061, 3076, 3092, 3084, 3101, 3066, 3109,

     3106, 3125, 3127, 3135, 3110, 3146, 3163, 3141, 3171, 3176,
     3160, 3181, 3177, 3200, 3194, 3195, 3211, 3213, 3225, 3217,
     3226, 3229, 3251, 3235, 3243, 3254, 3265, 3266, 3269, 3291,
     3283, 3308, 3287, 3317, 3305, 3320, 3321, 3333, 3336, 3339,
     3342, 3351,  438,    0,    0, 2702,    0, 2737,    0, 2805,
     2817, 2862, 2852, 2887, 2904, 2935,    0, 2955, 3032, 3252,
     3243, 3297,    0, 3339, 3330, 3345, 3357, 3358, 3346, 3358,
     3360, 3371, 3379,    0,    0, 3364, 3375,    0, 3385,    0,
        0, 3375,    0,    0, 3376, 3393, 3380, 3388,    0,    0,
     3397,    0,    0, 3399, 3389, 3409, 3392, 3405, 3395,    0,

        0, 3411, 3399, 3400, 3415, 3412,    0, 3423, 3429, 3428,
     3413,    0, 3425, 3432, 3437, 3422, 3428, 3429, 3449, 3451,
        0, 3448, 3450, 3450,    0, 3437, 3457, 3461,    0,    0,
      413, 3459, 3461, 3462, 3465, 3467, 3470, 3473, 3496, 3501,
     3498, 3504, 3527, 3513, 3515, 3532, 3529, 3557, 3558, 3541,
     3555, 3567, 3581, 3586, 3570, 3573, 3609, 3610, 3607, 3611,
     3641, 3599, 3635, 3644, 3640, 3643, 3673, 3645, 3649, 3679,
     3677, 3678, 3695, 3681, 3713, 3709, 3711, 3712, 3735, 3744,
     3745, 3746, 3749, 3774, 3768, 3778, 3784, 3780, 3786, 3789,
     3817, 3819, 3802, 3814, 3820, 3828, 3842, 3853, 3843, 3854,

     3856, 3872, 3882, 3877, 3893, 3895, 3911, 3912, 3894, 3896,
     3926, 3927, 3928, 3930, 3949, 3960, 3961, 3962,  405, 3464,
        0, 3494, 3511, 3574, 3577,    0, 3646,    0, 3706, 3725,
     3741, 3737,    0, 3788,    0, 3825,    0,    0,    0, 3936,
        0, 3942, 3949,    0,    0,    0,    0,    0, 3952, 3966,
     3971,    0,    0, 3954,    0, 3963,    0, 3983,    0, 3969,
     3985, 3966,    0, 3992, 4000, 3985, 3986,    0, 3992,    0,
     3995,    0, 4007, 4008, 4007, 3995,    0,    0,    0,    0,
     4001, 4008,  403, 4016, 4018, 4024, 4019, 4020, 4034, 4049,
     4050, 4052, 4074, 4058, 4073, 4088, 4086, 4090, 4091, 4104,

     4092, 4116, 4122, 4125, 4126, 4141, 4140, 4127, 4144, 4156,
     4158, 4159, 4180, 4170, 4196, 4175, 4181, 4184, 4194, 4226,
     4209, 4234, 4212, 4235, 4218, 4224, 4247, 4266, 4270, 4258,
     4269, 4280, 4292, 4284, 4302, 4288, 4318, 4324, 4323, 4337,
     4306, 4334, 4340, 4342, 4346, 4356,  407,    0,    0,    0,
     4068,    0,    0, 4162, 4214,    0,    0, 4213, 4200,    0,
        0,    0,    0, 4250, 4242,    0,    0, 4239, 4298,    0,
        0, 4288, 4349,    0,    0, 4343,    0, 4355, 4364, 4359,
     4375,    0,    0,  399, 4377, 4378, 4380, 4388, 4391, 4392,
     4394, 4410, 4396, 4409, 4420, 4431, 4422, 4428, 4432, 4434,

     4462, 4463, 4444, 4445, 4480, 4468, 4474, 4476, 4484, 4502,
     4485, 4486, 4519, 4498, 4517, 4516, 4538, 4528, 4540, 4542,
      399, 4413,    0, 4435,    0,    0, 4499,    0,    0, 4534,
        0,    0,    0, 4530, 4541, 4550,    0,  398, 4570, 4568,
     4571, 4572, 4573, 4594, 4576, 4584, 4612, 4602, 4606, 4607,
     4608, 4637, 4638, 4624,  393,  399, 4578,    0, 4602,    0,
        0, 4630,  391, 4670, 4656, 4660, 4668, 4666, 4672, 4681,
      357, 4687,    0,    0, 4638,  344, 4703, 4694, 4696, 4702,
      340, 4654,    0,  338, 4677, 4705,  338, 4693,  334, 4697,
      306, 4692,  303, 4704,  288, 4722,  255, 4723,  250, 4721,

      245, 4725,  243, 4733,  240, 4734,  235, 4821,  221,    0,
      226,  197,  187,  173, 4821,    0, 4821, 4790, 4795,  181,
     4800, 4805, 4810, 4815
    } ;

static const flex_int16_t yy_def[1225] =
    {   0,
     1217,    1, 1218, 1218, 1217,    5, 1217, 1217, 1217, 1217,
     1217, 1219, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1217, 1221, 1217, 1222, 1222, 1217,
     1222, 1223, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1224, 1224,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1222, 1217, 1217, 1219, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1217, 1221,
     1217, 1222, 1222, 1222, 1223, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62, 1222, 1217, 1217, 1217, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1222, 1222, 1222,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1217, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1222,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1217, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1222,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1217, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1222,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1217, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1222,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1217, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1222,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1217, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1222,   62,   62,   62,   62,   62,   62,   62,
     1217, 1217, 1220, 1220, 1220, 1222, 1222,   62,   62,   62,
     1217, 1217, 1220, 1222, 1222,   62, 1217, 1217, 1222, 1222,
     1217, 1217, 1222, 1222, 1217, 1217, 1222, 1222, 1217, 1217,

     1222, 1222, 1217, 1217, 1222, 1222, 1217, 1217, 1222, 1222,
     1217, 1222, 1217, 1222, 1217, 1222,    0, 1217, 1217, 1217,
     1217, 1217, 1217, 1217
    } ;

static const flex_int16_t yy_nxt[4898] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1216,  102,  113,  108,  137,  103,  104,  178,  114,  280,

      109,  115,  106,  110, 1215,  116, 1214,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  178,  114,  280,  109,  115,  106,
      110,  126,  116,  128,  117, 1213,  138,  127, 1212,  118,
      139,  129,  131,  174,  119,  120,  140,  130,  132,  133,
      134,  175, 1211,  121, 1209,  135,  122, 1207,  126,  123,
      128, 1205,  124,  138,  127,  125, 1203,  139,  129,  131,
      174, 1201,  120,  140,  130,  132,  133,  134,  175,  144,
      121,  141,  135,  122,  152,  142,  123,  176,  177,  124,
      148,  143,  125,  145,  281,  153,  183,   86,  149,  146,

      147,  154,  150,  155, 1199,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  176,  177, 1197,  148,  143, 1195,
      145,  281,  153,  286,  186,  149,  146,  147,  154,  150,
      155,  171,  151,  172,  156,  187,  173,  191,  192,  284,
      157,  158,  285,  159,   86,   86,  160,  234, 1193,  161,
      286,  162, 1191,  163,  164, 1189,  287, 1187,  171, 1184,
      172,  183,   86,  173,  195,  195,  284,  195,  158,  285,
      159,  223, 1181,  160,  234,  233,  161,  224,  162,  282,
      163,  164,  165,  287,  195,  195,  166,  283,  291,  167,
      168,  195,  195,  293,  195,  292,  169,  309,  223,  170,

     1172, 1172,  233, 1176,  224, 1171,  282, 1163, 1155,  165,
     1138,  195,  195,  166,  283,  291,  167,  168, 1121, 1084,
      293, 1047,  292,  169,  309,  983,  170,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  189,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  182,  182,
      919,  182,  182,  182,  182,  182,  182,  195,  225,  275,
      831,  743,  195,  628,  513,  310,  226,  182,  182,  182,
      235,  300,  227,  196,  236,  197,  301,  195,  311,  195,
      237,  198,  195,  199,  195,  225,  275,  200,  201,  195,
      195,  195,  310,  226,  273,  274,  396,  235,  300,  227,

      196,  236,  197,  301,  195,  311,  195,  237,  198,  195,
      199,  195,  312,  395,  200,  201,  278,  195,  195,  277,
      276,  273,  274,  182,  182,  182,  194,  182,  182,  182,
      182,  182,  182,  193,  182,  184,  238,  249,  195,  312,
      239,  195,  181,  182,  182,  182,  240,  298,  250,  252,
      202,  195,  313,  253,  251,  319,  195,  299,  320,  254,
      268,  195,  269,  238,  249,  270,  321,  239,  195,  195,
      203,  195,  179,  240,  298,  250,  252,  202,  195,  313,
      253,  251,  319,  195,  299,  320,  254,  268,  195,  269,
       97,  322,  270,  321,  288,  289,  195,  203,  195,  182,

      204,  323,  271,  324,  195,  325,  195,  205,  290,  326,
      272,  294,  295,  296,  206,  297,   96,  207,  322,  307,
      308,  288,  289,  329,  195,   87,  195,  204,  323,  271,
      324,  195,  325,  195,  205,  290,  326,  272,  294,  295,
      296,  206,  297,  302,  207,  303,  307,  308,  304, 1217,
      329,  195,  208,  195,  305,   47,  209,  330,  331,  327,
      210,  306,  328,  332,  337,  314,  211,  315,  338,  212,
      302,  316,  303,   47,  339,  304,  195, 1217,  317,  208,
      340,  305,  318,  209,  330,  331,  327,  210,  306,  328,
      332,  337,  314,  211,  315,  338,  212, 1217,  316,  346,

      333,  339,  347,  195,  195,  317,  341,  340,  342,  318,
      334,  213,  348,  214,  349,  335,  336,  343,  215,  344,
      352,  353,  354,  216,  195, 1217,  346,  333, 1217,  347,
      345,  195,  355,  341,  356,  342, 1217,  334,  213,  348,
      214,  349,  335,  336,  343,  215,  344,  352,  353,  354,
      216,  195,  217,  357,  358,  350,  195,  345,  351,  355,
      218,  356,  364,  219,  359,  365,  220,  366,  360,  221,
      372,  373,  222, 1217, 1217, 1217,  195, 1217, 1217,  217,
      357,  358,  350,  195, 1217,  351, 1217,  218,  361,  364,
      219,  359,  365,  220,  366,  360,  221,  372,  373,  222,

      367,  362,  370,  195,  195,  228,  363,  374,  375,  368,
      376,  229,  230,  231,  379,  361,  371,  369,  232,  377,
      380,  381,  382,  384,  195, 1217,  385,  367,  362,  370,
      378,  195,  228,  363,  374,  375,  368,  376,  229,  230,
      231,  379,  383,  371,  369,  232,  377,  380,  381,  382,
      384,  195,  241,  385,  386,  387,  195,  378,  388,  392,
      393,  390,  394,  514,  389,  515,  242, 1217, 1217,  383,
      516,  517,  243,  244,  391,  195,  195, 1217, 1217,  241,
     1217,  386,  387,  195,  518,  388,  392,  393,  390,  394,
      514,  389,  515,  242,  195,  195,  519,  516,  517,  243,

      244,  391,  195,  195,  195,  245,  195,  398,  195,  399,
      520,  518, 1217,  246,  195,  402, 1217,  247,  403,  195,
      248,  195,  195,  519,  195, 1217,  195, 1217,  195,  521,
     1217,  195,  245,  195,  398,  195,  399,  520, 1217,  195,
      246,  195,  402,  195,  247,  403,  195,  248,  195,  416,
      400,  195,  255,  195,  256,  195,  521,  257,  401,  417,
      258,  404,  259,  195,  260,  261,  195, 1217,  195,  195,
      195,  405,  525,  195,  195,  195,  416,  400, 1217,  255,
     1217,  256, 1217, 1217,  257,  401,  417,  258,  404,  259,
      195,  260,  261,  195,  195,  195,  195,  195,  405,  525,

      195,  195,  262,  195,  406,  407,  263,  425,  426,  264,
      265,  526,  418,  527,  195,  528,  266,  419,  408,  267,
      195,  195,  529,  195,  195,  530,  195, 1217, 1217,  262,
      195,  406,  407,  263,  425,  426,  264,  265,  526,  418,
      527,  195,  528,  266,  419,  408,  267, 1217, 1217,  529,
      195, 1217,  530,  195,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  189,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  195,  411,  195,  195,
      531,  195,  532,  409,  533, 1217,  534, 1217, 1217,  428,
      410,  430,  195, 1217,  427,  535,  195, 1217,  195,  195,
      195,  195, 1217,  195,  411,  195,  195,  531,  195,  532,
      409,  533,  195,  534,  429,  195,  428,  410,  430,  195,
      195,  427,  535,  195,  447,  195,  195,  195,  195,  195,
      536,  431,  539,  195,  540,  195,  412,  413,  414,  195,
      415,  429,  195,  541, 1217, 1217, 1217,  195,  542,  195,
     1217,  447, 1217,  195, 1217, 1217,  195,  536,  431,  539,

      195,  540,  195,  412,  413,  414,  195,  415, 1217,  537,
      541,  195,  195,  437, 1217,  542,  195,  420,  438,  421,
      195,  195,  422, 1217,  538,  440,  195,  195,  423, 1217,
      543,  195,  195,  195,  544,  424,  537,  439,  195,  195,
      437,  195, 1217, 1217,  420,  438,  421,  195,  195,  422,
      195,  538,  440,  195,  195,  423,  195,  543,  195,  195,
      441,  544,  424,  442,  439,  195,  545, 1217,  195,  432,
      195,  433, 1217, 1217,  195,  434,  195,  195,  546,  195,
      547,  448,  435,  195,  195,  195,  436,  441, 1217,  443,
      442,  195,  195,  545,  444,  195,  432,  195,  433,  195,

      195, 1217,  434,  195,  195,  546,  195,  547,  448,  435,
     1217,  195,  195,  436,  445,  195,  443,  446,  195,  195,
      195,  444,  195,  449, 1217,  195,  195,  195,  195,  195,
     1217,  195,  548,  456,  195,  549,  450,  455,  550,  195,
      551,  445,  195,  552,  446,  195,  195,  195,  195,  195,
      449,  195,  195,  553,  457,  195,  195,  195,  458,  548,
      456,  195,  549,  450,  455,  550,  195,  551, 1217,  554,
      552,  195,  195,  451,  195,  195,  195,  195,  195,  195,
      553,  457,  195,  452,  195,  458,  555,  195,  453,  454,
     1217,  465,  464,  459,  195,  460,  554,  556,  195,  195,

      451,  195,  195,  557,  195,  558,  195,  195,  195,  195,
      452, 1217,  559,  555,  195,  453,  454,  466,  465,  464,
      459,  195,  460,  461,  556,  462,  195,  195,  195,  195,
      557,  195,  558,  195,  195,  195,  463,  560,  471,  559,
      470,  195,  195, 1217,  466, 1217,  467,  195, 1217, 1217,
      461,  195,  462,  195,  195,  195,  468,  195,  195,  469,
      195,  195,  195,  463,  560,  471, 1217,  470,  195,  195,
      195,  472,  474,  467,  195,  473,  195,  195,  195, 1217,
      195,  195, 1217,  468,  195,  561,  469,  476,  195,  195,
      195,  195, 1217,  195,  475,  482,  195,  195,  472,  474,

     1217,  195,  473,  195,  195,  477,  479, 1217,  195,  478,
      195,  195,  561,  195,  476, 1217, 1217,  195,  195,  480,
      195,  475,  482,  195,  481,  195,  562,  195,  195, 1217,
      195, 1217,  477,  479,  483,  195,  478,  195,  195,  195,
      195,  485,  484,  195, 1217,  195,  480,  195,  492,  490,
      486,  481,  195,  562,  195,  195,  491,  195,  487,  195,
      195,  483,  195,  195, 1217,  195,  195,  488,  485,  484,
      195,  195,  195,  563,  195,  492,  490,  486, 1217,  564,
      195,  489,  195,  491,  497,  487,  195,  195, 1217,  493,
      195,  195,  195,  195,  488,  195,  494,  195,  195,  195,

      563,  195, 1217,  495,  195,  498,  564,  195,  489,  565,
     1217,  497,  499,  195,  496,  195,  493,  195,  195,  195,
      195,  195,  195,  494,  195,  500,  195, 1217,  195,  195,
      495,  195,  498,  504,  195,  566,  565,  510, 1217,  499,
      195,  496,  195,  195,  195,  501,  195,  502,  195,  195,
      503,  195,  500, 1217,  195,  505,  195,  195,  567, 1217,
      504,  195,  566,  195,  510,  512,  195,  508,  195,  195,
      195,  195,  501,  506,  502,  570,  195,  503,  195,  507,
      509,  195,  505,  511,  195,  567,  195,  195,  195,  195,
      195, 1217,  512,  195,  508,  195,  195, 1217,  195, 1217,

      506,  568,  570,  571,  572,  573,  507,  509,  574,  575,
      511,  569,  578,  195,  195,  195,  195,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  522,  568,  523,
      571,  572,  573,  576,  579,  574,  575,  580,  569,  578,
      581,  582,  583,  577,  524,  584,  585,  586,  587,  588,
      589,  590,  591,  592,  522,  593,  523,  594,  595,  596,
      576,  579,  597,  598,  580,  599,  600,  581,  582,  583,
      577,  524,  584,  585,  586,  587,  588,  589,  590,  591,
      592,  601,  593,  602,  594,  595,  596,  603,  604,  597,
      598,  605,  599,  600,  606,  607,  608,  609,  610,  611,

      612,  615,  613,  616,  617,  618,  619,  620,  601,  621,
      602,  614,  622,  623,  603,  604,  624,  626,  605,  627,
      625,  606,  607,  608,  609,  610,  611,  612,  615,  613,
      616,  617,  618,  619,  620, 1217,  621,  744,  614,  622,
      623,  195,  629,  624,  626,  195,  627,  625,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  630,  195,
      195,  195,  195,  195,  744,  195,  631,  632,  195,  629,
     1217,  195,  195,  745, 1217,  746, 1217,  195,  195,  195,
      195,  634, 1217,  195,  747,  630,  195,  195,  195,  195,
      195,  195,  195,  631,  632,  195,  195,  195,  195,  195,

      745,  195,  746,  636,  195,  195,  195,  195,  634,  633,
      195,  747,  637,  635,  638,  195,  195,  641,  195,  195,
     1217,  195,  195,  195,  195,  195,  195,  195,  195,  639,
      636,  195, 1217,  748,  195,  642,  633, 1217,  640,  637,
      635,  638,  195,  195,  641,  195,  195,  195,  195,  195,
     1217,  644,  195,  645,  195,  647,  639,  195,  195,  195,
      748,  195,  642,  195,  643,  640,  749,  195, 1217,  195,
      649, 1217,  195,  646,  195,  195,  195,  195,  644,  195,
      645,  648,  647,  195,  195,  195,  195,  195,  750,  650,
      195,  643, 1217,  749,  195,  651,  195,  649,  652,  195,

      646,  654,  195,  195,  195,  195,  195,  655,  648,  195,
      195, 1217,  195,  653,  195,  750,  650, 1217,  195,  195,
     1217,  659,  651,  195,  656,  652,  195,  195,  654,  195,
      195, 1217,  195,  195,  655,  657,  195,  195,  195,  660,
      653,  195, 1217,  195,  658,  195,  195,  661,  659,  751,
      195,  656, 1217,  195,  195,  195,  195,  195,  195,  662,
      195,  195,  657,  195,  195,  195,  660,  195,  195,  663,
      195,  658,  195,  195,  661,  195,  751,  667,  195,  664,
      195,  195,  195,  752,  195,  195,  662,  666,  195,  753,
      195,  665,  195,  195,  195,  754,  663,  195,  195,  195,

      195,  195,  195,  668,  667,  195,  664,  195,  195,  669,
      752,  755,  756, 1217,  666,  195,  753,  757,  665,  195,
      195,  195,  754,  670,  195,  195,  195,  195,  195,  672,
      668,  195,  195,  671,  195,  195,  669,  195,  755,  756,
      674,  195,  195, 1217,  757,  675,  195,  673,  195, 1217,
      670,  195,  195,  195,  195,  195,  672,  195,  195,  195,
      671,  195,  195,  195,  195,  195,  680,  674,  195,  681,
      676,  678,  675,  195,  673,  195,  677, 1217,  195,  195,
      682,  195,  195,  195,  195,  195,  195, 1217,  195,  195,
      195,  679,  195,  680,  683,  195,  681,  676,  678, 1217,

      195,  195,  195,  677,  684,  195,  758,  682,  195,  195,
      195,  685,  195,  195,  195,  195,  195,  195,  679,  688,
     1217,  683,  195, 1217,  687,  195,  686,  195,  195,  195,
      195,  684,  195,  758,  689,  759,  195,  195,  685,  195,
      760,  195,  195,  761,  195,  691,  688,  690,  195,  195,
      195,  687,  195,  686, 1217,  692,  195,  195,  195, 1217,
      693,  689,  759,  195,  195,  694,  195,  760,  195,  195,
      761,  195,  691,  195,  690,  195,  195,  195,  195,  195,
      698,  195,  692,  195,  195,  195,  696,  693, 1217,  695,
      195,  195,  694,  195,  702,  195,  195,  697,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  698,  195,  699,
      195,  195,  195,  696,  195,  703,  695,  701,  195, 1217,
      195,  702,  195,  195,  697,  700,  195, 1217,  195,  195,
      195,  195,  195,  704,  195,  195,  699,  195, 1217,  195,
     1217,  195,  703,  705,  701,  195,  195,  195, 1217,  195,
      195,  762,  700,  708,  195,  707,  706,  195, 1217,  195,
      704,  195,  195, 1217,  195,  195,  195,  195, 1217, 1217,
      705,  709,  195,  195,  195,  195,  195,  713,  762,  195,
      708,  195,  707,  706,  195,  195,  712,  715,  711,  195,
      195,  710,  195,  195,  195,  195,  195,  195,  709,  195,

      714, 1217,  195,  195,  713,  195,  195,  195,  195,  195,
      195,  195,  195,  712,  715,  711,  195,  195,  710,  195,
      763,  716,  195,  195,  195, 1217,  195,  714,  195,  717,
      718,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      719,  195,  195, 1217,  195,  764,  195,  763,  716,  722,
      195, 1217,  723,  195,  726,  195,  717,  718,  195,  720,
      195,  195,  195,  195,  195,  721,  195,  719,  195,  195,
      195,  195,  764,  195,  195,  195,  722,  195,  724,  723,
      195,  726,  725,  195,  195, 1217,  720,  195,  195,  195,
      195,  195,  721,  195,  732,  195,  727,  195,  195,  728,

      195,  195,  195, 1217,  195,  724, 1217,  195,  729,  725,
      195,  195,  733,  738,  195,  765,  195,  195,  195,  195,
      195,  732,  195,  727,  766,  195,  728,  730,  736,  731,
      195,  195,  195,  195,  195,  729,  195,  195, 1217,  733,
      738,  734,  765,  195,  195,  195,  195,  195, 1217,  735,
      195,  766,  195,  195,  730,  736,  731,  195,  195,  195,
      195,  741,  195,  195,  195,  737,  767,  195,  734,  768,
      195,  739,  769,  770,  195,  740,  735,  195,  195,  195,
      195,  771,  195,  742,  772,  195,  773,  774,  741,  195,
      195,  775,  737,  767,  195,  776,  768,  195,  739,  769,

      770,  777,  740,  778,  779,  195,  780,  781,  771,  195,
      742,  772,  782,  773,  774,  783,  784,  195,  775,  785,
      788,  786,  776,  789,  790,  791,  792,  795,  777,  796,
      778,  779,  787,  780,  781,  793,  794,  797,  798,  782,
      799,  800,  783,  784,  801,  802,  785,  788,  786,  803,
      789,  790,  791,  792,  795,  804,  796,  805,  806,  787,
      807,  808,  793,  794,  797,  798,  809,  799,  800,  810,
      811,  801,  802,  812,  813,  814,  803,  815,  816,  817,
      818,  819,  804,  820,  805,  806,  821,  807,  808,  822,
      823,  824,  825,  809,  826,  827,  810,  811,  828,  829,

      812,  813,  814,  830,  815,  816,  817,  818,  819,  195,
      820,  195,  195,  821,  195,  195,  822,  823,  824,  825,
      838,  826,  827,  195,  832,  828,  829,  833,  836,  834,
      830,  195,  835,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  839,  195,  837,  838,  195,  920,
      195,  832, 1217,  195,  833,  836,  834,  195,  195,  835,
      195,  195,  195,  921,  195,  195,  195,  195,  195,  195,
      195,  839,  195,  837,  840,  195,  920,  841,  195,  195,
      195, 1217,  195,  842,  195, 1217,  195,  195,  195,  195,
      921, 1217,  195,  195, 1217,  195,  195,  844,  195,  195,

      843,  840,  195,  195,  841,  195,  195,  195,  195,  195,
      842, 1217,  195,  195,  195,  195,  195,  845,  195,  847,
      195,  195, 1217,  195,  844,  195,  195,  843,  848,  195,
      195,  922,  195,  846,  195,  195,  195,  849,  195,  195,
      195,  195,  923, 1217,  845,  195,  847,  195,  195,  851,
      195,  850,  853,  195,  195,  848,  195,  195,  922,  195,
      846, 1217,  195,  195,  849,  195,  854,  195,  195,  923,
      852,  195, 1217,  195,  195,  195,  851,  195,  850,  853,
      195,  195,  195,  195,  195,  195,  924,  925,  195,  195,
      195,  195,  855,  854, 1217,  195,  195,  852,  195,  856,

      195,  195,  195, 1217,  195,  195,  858,  857,  195,  195,
      195,  862,  195,  924,  925,  195,  195,  195,  195,  855,
      860,  195,  195,  195,  195,  861,  856, 1217,  926,  195,
      195,  195,  195,  858,  857,  195,  859,  195,  862,  195,
      927,  195,  195,  195,  195,  195, 1217,  860,  195,  195,
      195,  195,  861,  195,  863,  926,  195,  195,  195,  195,
      864,  928,  195,  859,  195,  195,  195,  927,  195,  195,
      865,  195,  195,  195,  195, 1217,  195,  195,  195,  195,
      195,  863, 1217,  869,  195,  929,  195,  864,  928,  195,
      866,  195,  195,  195,  195,  195, 1217,  865,  195,  195,

      195,  195,  867,  195,  195,  195,  195, 1217, 1217,  868,
      869,  195,  929,  195,  195,  195, 1217,  866, 1217,  195,
      195,  195,  195,  871,  195,  195,  195,  870, 1217,  867,
      195,  195,  872,  195,  195,  195,  868,  195,  195,  195,
      195,  195,  195,  195,  876,  874,  195,  195,  873,  195,
      871,  195, 1217,  195,  870,  195,  875,  195,  195,  872,
      195,  195,  195,  195,  195,  195,  195,  195,  930,  195,
      195,  876,  874,  195,  195,  873,  195,  195,  879,  195,
      195,  195,  195,  875,  195,  195,  878,  880,  877, 1217,
      195, 1217,  195,  195,  195,  930,  195,  195,  195,  195,

      195,  195,  195, 1217,  195,  879,  195,  195,  195, 1217,
      195, 1217,  195,  878,  880,  877,  881,  882,  195,  195,
      195,  883,  195,  884,  195,  195,  195,  195,  195,  195,
      195,  885,  887,  886,  195,  195,  195,  195,  195,  195,
     1217, 1217, 1217,  881,  882,  195, 1217,  195,  883,  195,
      884,  195,  195,  195,  195,  195,  195,  195,  885,  887,
      886,  195,  195,  195,  888,  195,  889,  195,  891,  890,
     1217,  195,  195,  195,  195, 1217, 1217, 1217,  195,  195,
      195,  195,  195,  195, 1217,  892,  195,  195,  195,  195,
     1217,  888,  195,  889,  195,  891,  890,  195,  195,  195,

      195,  895,  195,  195,  896,  893,  195,  195,  195,  195,
     1217,  897,  892,  195,  195,  894,  195,  195,  899,  195,
      195,  900,  195,  195,  195, 1217,  195,  195,  895,  195,
      195,  896,  893,  195,  195,  898,  195,  195,  897,  195,
      195,  195,  894,  902,  195,  899,  195,  195,  900,  195,
      195,  195,  195,  195,  195,  904,  903,  195,  901,  195,
     1217,  195,  898,  195,  195, 1217,  195,  195,  195,  195,
      902,  195,  195,  195,  931,  195,  932,  195,  195,  195,
      195,  195,  904,  903,  195,  901,  195,  905,  195,  195,
      195,  195,  195,  908,  906,  195,  195,  195,  195,  195,

      195,  931,  195,  932,  195,  907, 1217,  195,  195,  195,
     1217,  195,  195,  195,  905,  195,  195,  195,  195,  195,
      908,  906,  195,  933,  195,  910,  909,  195,  912,  195,
      911,  914,  907,  195,  195, 1217,  195,  195,  195,  195,
      195, 1217,  195,  195,  195,  913,  195,  195, 1217,  915,
      933,  195,  910,  909,  195,  912,  195,  911,  914,  195,
      195,  195,  195,  195,  195,  917,  195,  195,  195,  934,
      195,  935,  913,  195,  195,  916,  915,  195,  195,  195,
      936,  195,  195,  937,  938,  195,  195,  939,  195,  195,
      195,  918,  917,  195,  195,  195,  934,  195,  935,  940,

      941,  942,  916,  943,  195,  944,  195,  936,  945,  195,
      937,  938,  195,  946,  939,  195,  947,  948,  918,  949,
      950,  952,  953,  951,  195,  954,  940,  941,  942,  955,
      943,  956,  944,  957,  958,  945,  959,  960,  961,  962,
      946,  963,  964,  947,  948,  965,  949,  950,  952,  953,
      951,  966,  954,  967,  968,  969,  955,  970,  956,  971,
      957,  958,  972,  959,  960,  961,  962,  973,  963,  964,
      974,  975,  965,  976,  977,  978,  979,  980,  966,  981,
      967,  968,  969,  982,  970,  195,  971,  195,  195,  972,
     1048,  195, 1217,  985,  973, 1217,  195,  974,  975,  986,

      976,  977,  978,  979,  980,  195,  981,  195,  195,  984,
      982,  195,  195,  195,  195,  195,  195, 1048,  195,  195,
      985,  987,  195,  195,  195,  988,  986,  195, 1217, 1049,
      195, 1217,  195,  989,  195,  195,  984, 1050,  195,  992,
      195,  195,  195,  195,  195,  990,  195,  195,  987,  195,
      195,  195,  988,  195,  195,  195, 1049,  195,  195,  195,
      989,  195,  993,  991, 1050,  994,  992,  997,  195,  195,
     1217,  195,  990,  195,  195,  195, 1217,  195,  195,  995,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  993,
      991,  996,  994,  195,  997, 1217, 1001,  998, 1217, 1002,

      195,  195,  195,  195,  195,  195,  995,  195,  195, 1217,
      195,  195,  195,  195,  195, 1051,  195, 1052,  996,  195,
      195, 1000,  999, 1001,  998,  195, 1002,  195,  195, 1217,
      195,  195,  195,  195,  195,  195,  195,  195, 1217,  195,
      195, 1006, 1051,  195, 1052,  195,  195, 1005, 1000,  999,
     1003, 1004,  195,  195,  195,  195,  195,  195, 1217,  195,
      195,  195,  195,  195,  195, 1007,  195,  195, 1006,  195,
      195,  195,  195, 1009, 1005,  195, 1217, 1003, 1004, 1053,
      195,  195,  195,  195,  195, 1008,  195,  195,  195,  195,
      195,  195, 1007,  195,  195,  195,  195,  195,  195,  195,

     1009, 1010,  195,  195,  195,  195, 1053, 1013,  195, 1217,
     1217, 1217, 1008,  195,  195, 1217,  195,  195,  195,  195,
     1011,  195,  195,  195,  195,  195,  195,  195, 1010, 1217,
      195,  195,  195, 1217, 1013,  195, 1012,  195,  195,  195,
     1054,  195, 1016, 1217, 1217, 1217,  195, 1011,  195, 1055,
      195,  195,  195, 1014,  195,  195, 1015,  195,  195,  195,
     1017,  195,  195, 1012,  195,  195,  195, 1054,  195, 1016,
      195,  195, 1018, 1217, 1056,  195, 1055, 1217, 1057, 1217,
     1014,  195,  195, 1015,  195,  195,  195, 1017,  195, 1019,
      195,  195,  195, 1217,  195,  195, 1020,  195,  195, 1018,

      195, 1056,  195, 1217,  195, 1057,  195, 1022,  195, 1021,
      195, 1058,  195, 1217,  195, 1024, 1019,  195,  195,  195,
      195,  195,  195, 1020,  195, 1023,  195,  195, 1027, 1217,
      195,  195,  195,  195, 1022,  195, 1021,  195, 1058,  195,
      195,  195, 1024,  195, 1028,  195,  195,  195,  195, 1059,
     1029,  195, 1023,  195,  195, 1027, 1025,  195, 1026,  195,
      195, 1217,  195,  195, 1030,  195,  195,  195,  195,  195,
      195, 1028,  195,  195,  195,  195, 1059, 1029, 1031,  195,
      195,  195,  195, 1025, 1032, 1026, 1033,  195,  195,  195,
      195, 1030,  195,  195, 1217,  195,  195, 1034,  195,  195,

      195,  195,  195,  195, 1035, 1031,  195,  195,  195,  195,
     1217, 1032, 1217, 1033, 1217,  195,  195, 1036,  195,  195,
      195,  195, 1041,  195, 1034,  195,  195,  195,  195,  195,
      195, 1035, 1037, 1039, 1040,  195, 1038,  195,  195,  195,
      195,  195,  195, 1217, 1036,  195,  195,  195,  195, 1041,
      195, 1042,  195, 1043,  195,  195,  195,  195,  195, 1037,
     1039, 1040, 1060, 1038,  195,  195,  195,  195,  195,  195,
     1044, 1045,  195,  195,  195,  195,  195, 1061, 1042,  195,
     1043,  195, 1046,  195,  195,  195,  195,  195,  195, 1060,
     1062, 1063, 1064, 1065, 1066,  195, 1067, 1044, 1045,  195,

      195,  195,  195,  195, 1061, 1068,  195,  195,  195, 1046,
     1069, 1070, 1071,  195,  195,  195, 1072, 1062, 1063, 1064,
     1065, 1066,  195, 1067, 1073, 1074, 1075, 1076, 1077, 1078,
     1079, 1080, 1068,  195,  195,  195, 1081, 1069, 1070, 1071,
     1082, 1083, 1085, 1072,  195, 1087,  195, 1217, 1217, 1217,
      195, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1086,
      195, 1088,  195, 1081,  195,  195,  195, 1082, 1083, 1085,
      195,  195, 1087,  195, 1089,  195,  195,  195,  195, 1217,
      195, 1217, 1092, 1090,  195, 1217, 1086,  195, 1088,  195,
     1217,  195,  195,  195, 1122,  195,  195,  195,  195,  195,

      195, 1089,  195,  195,  195,  195, 1093,  195, 1091, 1092,
     1090,  195,  195, 1095,  195, 1217,  195,  195,  195,  195,
      195, 1122,  195,  195, 1217,  195,  195,  195, 1096, 1094,
      195,  195,  195, 1093,  195, 1091,  195,  195,  195,  195,
     1095,  195,  195,  195,  195,  195,  195,  195,  195, 1217,
      195, 1097,  195,  195, 1217, 1096, 1094,  195, 1217,  195,
     1217,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195, 1217,  195, 1098,  195, 1097,  195,
      195, 1099,  195, 1217,  195,  195,  195,  195, 1123,  195,
      195, 1217, 1217,  195,  195,  195, 1101,  195,  195,  195,

      195,  195,  195, 1098,  195,  195,  195,  195, 1099,  195,
      195,  195,  195,  195,  195, 1123,  195,  195, 1102, 1100,
      195,  195,  195, 1101, 1103, 1217,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195, 1124,  195,  195, 1125,
      195, 1126,  195,  195, 1107, 1102, 1100,  195,  195,  195,
      195, 1103,  195,  195,  195,  195, 1105,  195,  195, 1104,
      195,  195,  195, 1124,  195,  195, 1125,  195, 1126,  195,
     1108, 1107,  195,  195, 1127, 1128, 1106,  195, 1129,  195,
      195,  195,  195, 1105,  195,  195, 1104,  195,  195, 1217,
     1109,  195,  195,  195, 1110,  195,  195, 1108, 1111,  195,

      195, 1127, 1128, 1106,  195, 1129,  195,  195,  195, 1112,
      195,  195,  195, 1217,  195,  195,  195, 1109,  195,  195,
      195, 1110,  195,  195, 1130, 1111,  195, 1113,  195, 1131,
      195,  195,  195,  195,  195, 1114, 1112,  195,  195,  195,
     1115,  195,  195,  195,  195,  195, 1116, 1117,  195,  195,
      195, 1130,  195,  195, 1113,  195, 1131,  195, 1217,  195,
      195,  195, 1114,  195,  195,  195,  195, 1115,  195,  195,
      195,  195,  195, 1116, 1117,  195,  195,  195, 1118,  195,
      195, 1132,  195,  195, 1133, 1119,  195,  195,  195, 1120,
      195,  195,  195,  195, 1134,  195,  195,  195, 1135,  195,

     1136, 1137,  195,  195,  195, 1118,  195,  195, 1132,  195,
      195, 1133, 1119,  195, 1139,  195, 1120,  195,  195,  195,
     1140, 1134,  195,  195,  195, 1135,  195, 1136, 1137,  195,
      195,  195, 1141,  195,  195,  195,  195,  195,  195, 1217,
      195, 1139,  195, 1217,  195,  195, 1142, 1140,  195,  195,
      195,  195, 1156,  195,  195,  195,  195,  195,  195, 1141,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195, 1143, 1142,  195,  195, 1157,  195,  195, 1156,
      195,  195,  195,  195,  195,  195, 1144,  195,  195,  195,
      195,  195, 1217,  195, 1147,  195, 1145,  195,  195, 1143,

      195,  195,  195, 1157,  195,  195,  195,  195,  195,  195,
      195,  195,  195, 1144,  195,  195,  195,  195,  195, 1146,
      195, 1147,  195, 1145,  195, 1148,  195,  195,  195,  195,
      195,  195,  195,  195, 1149,  195,  195,  195,  195,  195,
     1158,  195,  195,  195,  195,  195, 1146,  195,  195,  195,
     1152,  195, 1148,  195, 1154,  195, 1151,  195,  195,  195,
     1150, 1149,  195,  195,  195,  195,  195, 1158,  195,  195,
      195,  195,  195, 1159,  195,  195, 1160, 1152, 1161, 1153,
     1162, 1154, 1217, 1151,  195, 1217,  195, 1150,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

     1159,  195,  195, 1160, 1173, 1161, 1153, 1162, 1217, 1164,
      195,  195, 1165,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195, 1217,  195,  195,
      195, 1173,  195,  195,  195, 1166, 1164,  195,  195, 1165,
      195,  195, 1174,  195,  195,  195,  195,  195,  195,  195,
      195, 1167,  195,  195, 1168,  195, 1217,  195,  195,  195,
      195,  195, 1166,  195,  195,  195, 1175,  195, 1170, 1174,
      195, 1177, 1172, 1183, 1169,  195, 1188,  195, 1167,  195,
      195, 1168, 1178,  195,  195,  195,  195, 1217, 1172, 1172,
      195,  195,  195, 1175,  195, 1170,  195,  195,  195, 1190,

     1183, 1169,  195, 1188, 1177, 1172,  195,  195, 1179, 1178,
      195,  195,  195,  195,  195, 1217,  195, 1180,  195,  195,
      195,  195,  195,  195, 1217,  195, 1190,  195,  195,  195,
     1182,  195, 1192,  195,  195, 1179, 1194, 1186, 1196,  195,
      195,  195,  195,  195, 1180,  195, 1185,  195,  195,  195,
     1198,  195, 1200, 1202,  195,  195, 1204, 1182,  195, 1192,
     1206, 1208, 1210, 1194, 1186, 1196, 1217,  195, 1217,  195,
     1217, 1217, 1217, 1185, 1217,  195, 1217, 1198,  195, 1200,
     1202, 1217, 1217, 1204, 1217, 1217, 1217, 1206, 1208, 1210,
       46,   46,   46,   46,   46,   88, 1217, 1217,   88,   88,

      180,  180,  180, 1217,  180,  182, 1217,  182,  182,  182,
      185, 1217,  185,  185,  185,  195, 1217,  195,  195,  195,
        7, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217

    } ;

static const flex_int16_t yy_chk[4898] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1220,   23,   30,   24,   21,
     1214,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1213,   25, 1212,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1211,   32,   27, 1209,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1207,   26, 1205,   29,   26, 1203,   27,   26,
       28, 1201,   26,   32,   27,   26, 1199,   32,   28,   29,
       42, 1197,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34,  100,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1195,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1193,   35,   33, 1191,
       34,  100,   36,  103,   55,   35,   34,   34,   36,   35,
       38,   41,   35,   41,   38,   55,   41,   58,   58,  102,
       38,   39,  102,   39,   86,   86,   39,   71, 1189,   39,
      103,   39, 1187,   39,   39, 1184,  104, 1181,   41, 1176,
       41,  183,  183,   41,   67,   70,  102,   71,   39,  102,
       39,   67, 1171,   39,   71,   70,   39,   67,   39,  101,
       39,   39,   40,  104,   67,   70,   40,  101,  107,   40,
       40,   67,   70,  108,   71,  107,   40,  114,   67,   40,

     1156, 1156,   70, 1163,   67, 1155,  101, 1138, 1121,   40,
     1084,   67,   70,   40,  101,  107,   40,   40, 1047,  983,
      108,  919,  107,   40,  114,  831,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
      743,   61,   61,   61,   61,   61,   61,   77,   68,   84,
      628,  513,   68,  396,  278,  115,   68,   61,   61,   61,
       72,  111,   68,   61,   72,   61,  111,   77,  116,   84,
       72,   61,   68,   61,   77,   68,   84,   61,   61,   68,
       72,   83,  115,   68,   83,   83,  187,   72,  111,   68,

       61,   72,   61,  111,   77,  116,   84,   72,   61,   68,
       61,   83,  117,  185,   61,   61,   90,   72,   83,   88,
       85,   83,   83,   61,   62,   62,   60,   62,   62,   62,
       62,   62,   62,   59,   52,   51,   73,   76,   83,  117,
       73,   76,   47,   62,   62,   62,   73,  110,   76,   78,
       62,   81,  118,   78,   76,  120,   73,  110,  121,   78,
       81,   76,   81,   73,   76,   81,  122,   73,   76,   78,
       62,   81,   45,   73,  110,   76,   78,   62,   81,  118,
       78,   76,  120,   73,  110,  121,   78,   81,   76,   81,
       20,  123,   81,  122,  105,  105,   78,   62,   81,   62,

       63,  124,   82,  125,   63,  126,   82,   63,  105,  127,
       82,  109,  109,  109,   63,  109,   19,   63,  123,  113,
      113,  105,  105,  129,   63,   11,   82,   63,  124,   82,
      125,   63,  126,   82,   63,  105,  127,   82,  109,  109,
      109,   63,  109,  112,   63,  112,  113,  113,  112,    7,
      129,   63,   64,   82,  112,    4,   64,  130,  132,  128,
       64,  112,  128,  133,  135,  119,   64,  119,  136,   64,
      112,  119,  112,    3,  137,  112,   64,    0,  119,   64,
      138,  112,  119,   64,  130,  132,  128,   64,  112,  128,
      133,  135,  119,   64,  119,  136,   64,    0,  119,  141,

      134,  137,  142,   64,   65,  119,  139,  138,  139,  119,
      134,   65,  143,   65,  144,  134,  134,  140,   65,  140,
      146,  147,  148,   65,   65,    0,  141,  134,    0,  142,
      140,   65,  150,  139,  151,  139,    0,  134,   65,  143,
       65,  144,  134,  134,  140,   65,  140,  146,  147,  148,
       65,   65,   66,  152,  153,  145,   66,  140,  145,  150,
       66,  151,  156,   66,  154,  157,   66,  158,  154,   66,
      161,  162,   66,    0,    0,    0,   66,    0,    0,   66,
      152,  153,  145,   66,    0,  145,    0,   66,  155,  156,
       66,  154,  157,   66,  158,  154,   66,  161,  162,   66,

      159,  155,  160,   66,   69,   69,  155,  163,  164,  159,
      165,   69,   69,   69,  167,  155,  160,  159,   69,  166,
      168,  169,  170,  171,   69,    0,  171,  159,  155,  160,
      166,   69,   69,  155,  163,  164,  159,  165,   69,   69,
       69,  167,  170,  160,  159,   69,  166,  168,  169,  170,
      171,   69,   74,  171,  172,  173,   74,  166,  174,  176,
      177,  175,  178,  281,  174,  283,   74,    0,    0,  170,
      284,  286,   74,   74,  175,  195,   74,    0,    0,   74,
        0,  172,  173,   74,  288,  174,  176,  177,  175,  178,
      281,  174,  283,   74,  197,  195,  289,  284,  286,   74,

       74,  175,  195,   74,   75,   75,  203,  196,  196,  197,
      290,  288,    0,   75,  197,  199,    0,   75,  199,  199,
       75,  197,  195,  289,   75,    0,  203,    0,  196,  291,
        0,   75,   75,  203,  196,  196,  197,  290,    0,  199,
       75,  197,  199,  198,   75,  199,  199,   75,  200,  207,
      198,   75,   79,  203,   79,  196,  291,   79,  198,  207,
       79,  200,   79,  198,   79,   79,  199,    0,  200,  207,
      198,  201,  293,  201,   79,  200,  207,  198,    0,   79,
        0,   79,    0,    0,   79,  198,  207,   79,  200,   79,
      198,   79,   79,  201,  210,  200,  207,  208,  201,  293,

      201,   79,   80,  202,  202,  202,   80,  210,  210,   80,
       80,  294,  208,  295,  210,  296,   80,  208,  202,   80,
      201,  210,  297,  202,  208,  298,   80,    0,    0,   80,
      202,  202,  202,   80,  210,  210,   80,   80,  294,  208,
      295,  210,  296,   80,  208,  202,   80,    0,    0,  297,
      202,    0,  298,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  204,  205,  211,  212,
      299,  205,  300,  204,  301,    0,  302,    0,    0,  212,
      204,  214,  214,    0,  211,  303,  204,    0,  211,  212,
      213,  205,    0,  204,  205,  211,  212,  299,  205,  300,
      204,  301,  214,  302,  213,  226,  212,  204,  214,  214,
      213,  211,  303,  204,  226,  211,  212,  213,  205,  206,
      304,  215,  306,  215,  307,  226,  206,  206,  206,  214,
      206,  213,  226,  308,    0,    0,    0,  213,  309,  206,
        0,  226,    0,  215,    0,    0,  206,  304,  215,  306,

      215,  307,  226,  206,  206,  206,  217,  206,    0,  305,
      308,  218,  220,  217,    0,  309,  206,  209,  218,  209,
      215,  209,  209,    0,  305,  220,  217,  219,  209,    0,
      310,  218,  220,  217,  311,  209,  305,  219,  218,  220,
      217,  209,    0,    0,  209,  218,  209,  219,  209,  209,
      221,  305,  220,  217,  219,  209,  222,  310,  218,  220,
      221,  311,  209,  222,  219,  227,  313,    0,  209,  216,
      221,  216,    0,    0,  219,  216,  222,  221,  314,  223,
      315,  227,  216,  222,  224,  227,  216,  221,    0,  223,
      222,  216,  227,  313,  224,  228,  216,  221,  216,  223,

      225,    0,  216,  222,  224,  314,  223,  315,  227,  216,
        0,  224,  227,  216,  225,  228,  223,  225,  216,  229,
      225,  224,  228,  229,    0,  230,  223,  225,  232,  233,
        0,  224,  316,  233,  234,  317,  230,  232,  318,  229,
      319,  225,  228,  320,  225,  230,  229,  225,  232,  233,
      229,  246,  230,  321,  234,  232,  233,  235,  235,  316,
      233,  234,  317,  230,  232,  318,  229,  319,    0,  322,
      320,  246,  230,  231,  231,  232,  233,  235,  246,  238,
      321,  234,  239,  231,  235,  235,  323,  236,  231,  231,
        0,  239,  238,  236,  231,  236,  322,  324,  246,  238,

      231,  231,  239,  325,  235,  326,  238,  236,  240,  239,
      231,    0,  327,  323,  236,  231,  231,  240,  239,  238,
      236,  231,  236,  237,  324,  237,  238,  237,  240,  239,
      325,  241,  326,  243,  236,  240,  237,  328,  244,  327,
      243,  242,  244,    0,  240,    0,  241,  237,    0,    0,
      237,  241,  237,  243,  237,  240,  242,  248,  241,  242,
      243,  242,  244,  237,  328,  244,    0,  243,  242,  244,
      245,  245,  248,  241,  237,  247,  247,  248,  241,    0,
      243,  249,    0,  242,  248,  329,  242,  250,  242,  244,
      245,  250,    0,  253,  249,  253,  247,  245,  245,  248,

        0,  249,  247,  247,  248,  251,  252,    0,  249,  251,
      252,  250,  329,  253,  250,    0,    0,  245,  250,  252,
      253,  249,  253,  247,  252,  251,  330,  254,  249,    0,
      252,    0,  251,  252,  254,  260,  251,  252,  250,  255,
      253,  256,  255,  256,    0,  258,  252,  254,  260,  258,
      256,  252,  251,  330,  254,  260,  259,  252,  256,  255,
      259,  254,  260,  256,    0,  258,  255,  257,  256,  255,
      256,  257,  258,  331,  254,  260,  258,  256,    0,  332,
      259,  257,  260,  259,  264,  256,  255,  259,    0,  261,
      256,  257,  258,  261,  257,  263,  262,  265,  257,  262,

      331,  266,    0,  263,  264,  265,  332,  259,  257,  333,
        0,  264,  266,  261,  263,  263,  261,  265,  257,  262,
      261,  266,  263,  262,  265,  267,  262,    0,  266,  267,
      263,  264,  265,  269,  269,  334,  333,  273,    0,  266,
      261,  263,  263,  268,  265,  267,  262,  268,  266,  267,
      268,  270,  267,    0,  269,  270,  267,  273,  335,    0,
      269,  269,  334,  268,  273,  275,  271,  272,  274,  275,
      268,  270,  267,  271,  268,  337,  267,  268,  270,  271,
      272,  269,  270,  274,  273,  335,  271,  272,  274,  275,
      268,    0,  275,  271,  272,  274,  275,    0,  270,    0,

      271,  336,  337,  338,  340,  341,  271,  272,  342,  343,
      274,  336,  345,  271,  272,  274,  275,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  292,  336,  292,
      338,  340,  341,  344,  346,  342,  343,  347,  336,  345,
      348,  349,  351,  344,  292,  352,  353,  354,  355,  356,
      357,  358,  359,  360,  292,  361,  292,  362,  363,  364,
      344,  346,  365,  366,  347,  367,  368,  348,  349,  351,
      344,  292,  352,  353,  354,  355,  356,  357,  358,  359,
      360,  370,  361,  371,  362,  363,  364,  372,  373,  365,
      366,  374,  367,  368,  375,  376,  377,  378,  379,  380,

      382,  384,  383,  384,  385,  386,  387,  388,  370,  389,
      371,  383,  390,  391,  372,  373,  392,  393,  374,  394,
      392,  375,  376,  377,  378,  379,  380,  382,  384,  383,
      384,  385,  386,  387,  388,    0,  389,  514,  383,  390,
      391,  398,  399,  392,  393,  400,  394,  392,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  401,  402,
      403,  398,  399,  405,  514,  400,  402,  404,  398,  399,
        0,  404,  400,  515,    0,  516,    0,  407,  401,  402,
      403,  407,    0,  405,  517,  401,  402,  403,  398,  399,
      405,  404,  400,  402,  404,  408,  409,  407,  404,  406,

      515,  412,  516,  409,  407,  401,  402,  403,  407,  406,
      405,  517,  410,  408,  410,  408,  409,  412,  404,  406,
        0,  412,  408,  409,  407,  411,  406,  413,  412,  410,
      409,  415,    0,  518,  410,  413,  406,    0,  411,  410,
      408,  410,  408,  409,  412,  411,  406,  413,  412,  414,
        0,  415,  411,  416,  413,  418,  410,  416,  415,  417,
      518,  410,  413,  420,  414,  411,  519,  419,    0,  414,
      420,    0,  411,  417,  413,  418,  414,  416,  415,  417,
      416,  419,  418,  420,  416,  421,  417,  419,  520,  421,
      420,  414,    0,  519,  419,  422,  414,  420,  423,  422,

      417,  424,  418,  424,  416,  421,  417,  425,  419,  426,
      420,    0,  421,  423,  419,  520,  421,    0,  423,  422,
        0,  429,  422,  424,  426,  423,  422,  425,  424,  426,
      424,    0,  421,  428,  425,  427,  426,  430,  427,  431,
      423,  429,    0,  431,  428,  423,  422,  432,  429,  522,
      424,  426,    0,  428,  425,  434,  426,  430,  427,  433,
      428,  433,  427,  431,  430,  427,  431,  432,  429,  434,
      431,  428,  435,  437,  432,  434,  522,  438,  436,  435,
      428,  433,  434,  525,  430,  427,  433,  437,  433,  526,
      431,  436,  435,  437,  432,  527,  434,  438,  436,  435,

      437,  440,  434,  439,  438,  436,  435,  439,  433,  440,
      525,  528,  530,    0,  437,  441,  526,  531,  436,  435,
      437,  440,  527,  441,  438,  436,  442,  439,  440,  443,
      439,  444,  443,  442,  439,  441,  440,  445,  528,  530,
      445,  446,  441,    0,  531,  446,  442,  444,  440,    0,
      441,  444,  443,  442,  439,  447,  443,  445,  444,  443,
      442,  446,  441,  448,  445,  449,  451,  445,  446,  452,
      447,  449,  446,  442,  444,  447,  448,    0,  444,  443,
      453,  450,  447,  448,  445,  449,  451,    0,  446,  452,
      448,  450,  449,  451,  454,  455,  452,  447,  449,    0,

      453,  450,  447,  448,  454,  457,  532,  453,  450,  458,
      448,  455,  449,  451,  454,  455,  452,  456,  450,  459,
        0,  454,  455,    0,  458,  457,  456,  453,  450,  458,
      460,  454,  457,  532,  460,  534,  458,  456,  455,  459,
      535,  454,  455,  536,  456,  462,  459,  461,  461,  462,
      460,  458,  457,  456,    0,  462,  458,  460,  463,    0,
      463,  460,  534,  464,  456,  464,  459,  535,  461,  462,
      536,  466,  462,  465,  461,  461,  462,  460,  463,  468,
      469,  467,  462,  464,  469,  463,  466,  463,    0,  465,
      464,  466,  464,  465,  473,  461,  462,  467,  466,  468,

      465,  467,  470,  472,  469,  463,  468,  469,  467,  470,
      464,  469,  471,  466,  473,  474,  465,  472,  466,    0,
      465,  473,  470,  472,  467,  471,  468,    0,  467,  470,
      472,  469,  471,  475,  476,  474,  470,  475,    0,  471,
        0,  473,  474,  476,  472,  477,  479,  478,    0,  470,
      472,  537,  471,  479,  476,  478,  477,  475,    0,  471,
      475,  476,  474,    0,  475,  477,  479,  478,    0,    0,
      476,  480,  477,  479,  478,  480,  481,  484,  537,  483,
      479,  476,  478,  477,  475,  482,  483,  486,  482,  487,
      485,  481,  477,  479,  478,  480,  481,  484,  480,  483,

      485,    0,  480,  481,  484,  482,  483,  486,  488,  487,
      485,  489,  482,  483,  486,  482,  487,  485,  481,  490,
      538,  488,  480,  481,  484,    0,  483,  485,  488,  489,
      490,  489,  482,  491,  486,  488,  487,  485,  489,  490,
      491,  495,  494,    0,  492,  539,  490,  538,  488,  494,
      493,    0,  495,  491,  498,  488,  489,  490,  489,  492,
      491,  495,  494,  496,  492,  493,  490,  491,  495,  494,
      493,  492,  539,  497,  498,  499,  494,  493,  496,  495,
      491,  498,  497,  496,  503,    0,  492,  500,  495,  494,
      496,  492,  493,  497,  503,  499,  500,  493,  509,  501,

      497,  498,  499,    0,  503,  496,    0,  500,  501,  497,
      496,  503,  504,  509,  500,  540,  504,  502,  509,  501,
      497,  503,  499,  500,  541,  509,  501,  502,  507,  502,
      507,  503,  505,  506,  500,  501,  504,  502,    0,  504,
      509,  505,  540,  504,  502,  509,  501,  508,    0,  506,
      507,  541,  505,  506,  502,  507,  502,  507,  511,  505,
      506,  511,  510,  504,  502,  508,  542,  508,  505,  545,
      512,  510,  546,  547,  508,  510,  506,  507,  511,  505,
      506,  548,  510,  512,  549,  511,  550,  551,  511,  510,
      512,  553,  508,  542,  508,  554,  545,  512,  510,  546,

      547,  557,  510,  558,  560,  511,  562,  563,  548,  510,
      512,  549,  564,  550,  551,  565,  566,  512,  553,  567,
      570,  568,  554,  574,  576,  577,  579,  581,  557,  582,
      558,  560,  568,  562,  563,  580,  580,  583,  585,  564,
      586,  587,  565,  566,  588,  589,  567,  570,  568,  591,
      574,  576,  577,  579,  581,  592,  582,  594,  595,  568,
      596,  597,  580,  580,  583,  585,  598,  586,  587,  599,
      600,  588,  589,  601,  604,  605,  591,  606,  607,  608,
      611,  612,  592,  614,  594,  595,  615,  596,  597,  616,
      617,  618,  619,  598,  620,  621,  599,  600,  623,  625,

      601,  604,  605,  627,  606,  607,  608,  611,  612,  631,
      614,  629,  632,  615,  630,  633,  616,  617,  618,  619,
      635,  620,  621,  636,  629,  623,  625,  630,  633,  631,
      627,  629,  632,  638,  630,  633,  631,  634,  629,  632,
      635,  630,  633,  636,  637,  639,  634,  635,  637,  746,
      636,  629,    0,  638,  630,  633,  631,  634,  629,  632,
      638,  630,  633,  748,  634,  639,  644,  635,  637,  641,
      636,  637,  639,  634,  640,  637,  746,  641,  640,  642,
      638,    0,  645,  642,  634,    0,  644,  643,  648,  641,
      748,    0,  639,  644,    0,  637,  641,  645,  640,  642,

      643,  640,  645,  646,  641,  640,  642,  643,  648,  645,
      642,    0,  649,  644,  643,  648,  641,  646,  647,  649,
      650,  651,    0,  646,  645,  640,  642,  643,  650,  645,
      646,  750,  649,  647,  643,  648,  652,  651,  647,  649,
      650,  651,  751,    0,  646,  647,  649,  650,  651,  653,
      646,  652,  655,  653,  655,  650,  652,  654,  750,  649,
      647,    0,  656,  652,  651,  647,  656,  650,  651,  751,
      654,  658,    0,  653,  655,  659,  653,  654,  652,  655,
      653,  655,  656,  652,  654,  657,  752,  753,  660,  656,
      662,  658,  657,  656,    0,  659,  661,  654,  658,  660,

      653,  655,  659,    0,  654,  657,  662,  661,  660,  656,
      662,  666,  657,  752,  753,  660,  661,  662,  658,  657,
      664,  663,  659,  661,  664,  665,  660,    0,  754,  665,
      667,  666,  657,  662,  661,  660,  663,  662,  666,  668,
      755,  663,  670,  661,  664,  671,    0,  664,  663,  665,
      667,  664,  665,  674,  668,  754,  665,  667,  666,  668,
      669,  756,  670,  663,  669,  671,  668,  755,  663,  670,
      672,  664,  671,  674,  672,    0,  665,  667,  676,  673,
      674,  668,    0,  678,  669,  758,  668,  669,  756,  670,
      673,  669,  671,  675,  672,  677,    0,  672,  676,  673,

      674,  672,  675,  678,  680,  676,  673,    0,    0,  677,
      678,  669,  758,  675,  679,  677,    0,  673,    0,  681,
      675,  672,  677,  680,  680,  676,  673,  679,    0,  675,
      678,  680,  681,  684,  679,  682,  677,  685,  686,  681,
      675,  679,  677,  683,  685,  683,  681,  687,  682,  688,
      680,  680,    0,  684,  679,  682,  683,  685,  686,  681,
      684,  679,  682,  683,  685,  686,  681,  687,  759,  688,
      683,  685,  683,  689,  687,  682,  688,  690,  692,  691,
      684,  693,  682,  683,  685,  686,  691,  694,  689,    0,
      683,    0,  699,  689,  687,  759,  688,  690,  692,  691,

      689,  693,  695,    0,  690,  692,  691,  694,  693,    0,
      697,    0,  699,  691,  694,  689,  695,  695,  696,  699,
      689,  696,  695,  697,  690,  692,  691,  698,  693,  695,
      697,  698,  701,  700,  694,  700,  705,  697,  696,  699,
        0,    0,    0,  695,  695,  696,    0,  698,  696,  695,
      697,  702,  701,  703,  698,  700,  705,  697,  698,  701,
      700,  704,  700,  705,  702,  696,  703,  708,  706,  704,
        0,  702,  706,  703,  698,    0,    0,    0,  702,  701,
      703,  704,  700,  705,    0,  707,  711,  708,  704,  707,
        0,  702,  706,  703,  708,  706,  704,  709,  702,  706,

      703,  711,  710,  713,  712,  709,  711,  712,  704,  707,
        0,  713,  707,  711,  708,  710,  707,  709,  715,  706,
      715,  716,  710,  713,  709,    0,  714,  712,  711,  710,
      713,  712,  709,  711,  712,  714,  707,  717,  713,  718,
      715,  716,  710,  720,  709,  715,  714,  715,  716,  710,
      713,  719,  721,  714,  712,  722,  721,  717,  719,  718,
        0,  724,  714,  720,  717,    0,  718,  715,  716,  725,
      720,  719,  721,  714,  760,  722,  761,  723,  719,  721,
      726,  724,  722,  721,  717,  719,  718,  723,  724,  725,
      720,  727,  728,  729,  726,  729,  725,  723,  719,  721,

      726,  760,  722,  761,  723,  727,    0,  726,  724,  731,
        0,  727,  728,  733,  723,  729,  725,  730,  727,  728,
      729,  726,  729,  762,  723,  731,  730,  726,  733,  731,
      732,  735,  727,  733,  732,    0,  731,  730,  727,  728,
      733,    0,  729,  734,  730,  734,  736,  737,    0,  736,
      762,  735,  731,  730,  732,  733,  731,  732,  735,  738,
      733,  732,  739,  734,  730,  740,  736,  737,  741,  764,
      734,  765,  734,  736,  737,  738,  736,  742,  735,  738,
      766,  732,  739,  767,  768,  740,  738,  769,  741,  739,
      734,  742,  740,  736,  737,  741,  764,  742,  765,  770,

      771,  772,  738,  773,  742,  776,  738,  766,  777,  739,
      767,  768,  740,  779,  769,  741,  782,  785,  742,  786,
      787,  788,  791,  787,  742,  794,  770,  771,  772,  795,
      773,  796,  776,  797,  798,  777,  799,  802,  803,  804,
      779,  805,  806,  782,  785,  808,  786,  787,  788,  791,
      787,  809,  794,  810,  811,  813,  795,  814,  796,  815,
      797,  798,  816,  799,  802,  803,  804,  817,  805,  806,
      818,  819,  808,  820,  822,  823,  824,  826,  809,  827,
      810,  811,  813,  828,  814,  832,  815,  833,  834,  816,
      920,  835,    0,  836,  817,    0,  837,  818,  819,  838,

      820,  822,  823,  824,  826,  832,  827,  833,  834,  834,
      828,  835,  832,  836,  833,  834,  837,  920,  835,  838,
      836,  839,  839,  837,  841,  840,  838,  840,    0,  922,
      842,    0,  832,  841,  833,  834,  834,  923,  835,  844,
      836,  845,  839,  837,  841,  842,  838,  840,  839,  839,
      842,  841,  840,  843,  840,  847,  922,  842,  846,  844,
      841,  845,  846,  843,  923,  847,  844,  850,  845,  839,
        0,  841,  842,  843,  840,  847,    0,  842,  846,  848,
      843,  851,  847,  848,  849,  846,  844,  850,  845,  846,
      843,  849,  847,  852,  850,    0,  855,  852,    0,  856,

      843,  851,  847,  848,  849,  846,  848,  853,  851,    0,
      848,  849,  854,  852,  850,  924,  855,  925,  849,  856,
      852,  854,  853,  855,  852,  862,  856,  853,  851,    0,
      848,  849,  854,  859,  853,  857,  858,  860,    0,  854,
      852,  860,  924,  855,  925,  862,  856,  859,  854,  853,
      857,  858,  862,  859,  853,  857,  858,  860,    0,  854,
      859,  863,  857,  858,  860,  861,  865,  861,  860,  866,
      864,  868,  862,  865,  859,  869,    0,  857,  858,  927,
      859,  863,  857,  858,  860,  864,  865,  861,  863,  866,
      864,  868,  861,  865,  861,  869,  866,  864,  868,  867,

      865,  867,  869,  871,  872,  870,  927,  874,  863,    0,
        0,    0,  864,  865,  861,    0,  866,  864,  868,  867,
      870,  873,  869,  871,  872,  870,  867,  874,  867,    0,
      871,  872,  870,    0,  874,  876,  873,  877,  878,  875,
      929,  873,  876,    0,    0,    0,  867,  870,  873,  930,
      871,  872,  870,  875,  874,  876,  875,  877,  878,  875,
      879,  879,  876,  873,  877,  878,  875,  929,  873,  876,
      880,  881,  882,    0,  931,  883,  930,    0,  932,    0,
      875,  879,  876,  875,  877,  878,  875,  879,  879,  883,
      880,  881,  882,    0,  885,  883,  884,  880,  881,  882,

      884,  931,  883,    0,  886,  932,  888,  886,  879,  885,
      887,  934,  889,    0,  885,  890,  883,  880,  881,  882,
      884,  885,  883,  884,  886,  887,  888,  884,  893,    0,
      887,  886,  889,  888,  886,  890,  885,  887,  934,  889,
      894,  885,  890,  891,  894,  892,  895,  884,  893,  936,
      896,  886,  887,  888,  896,  893,  891,  887,  892,  889,
      894,    0,  890,  891,  897,  892,  895,  894,  897,  899,
      891,  894,  892,  895,  896,  893,  936,  896,  898,  898,
      900,  896,  901,  891,  899,  892,  901,  894,  897,  899,
      891,  897,  892,  895,    0,  897,  899,  902,  902,  898,

      900,  896,  901,  904,  903,  898,  898,  900,  903,  901,
        0,  899,    0,  901,    0,  897,  899,  904,  902,  905,
      909,  906,  910,  904,  902,  902,  898,  900,  903,  901,
      904,  903,  905,  907,  908,  903,  906,  907,  908,  905,
      909,  906,  910,    0,  904,  902,  905,  909,  906,  910,
      904,  911,  911,  912,  913,  903,  914,  907,  908,  905,
      907,  908,  940,  906,  907,  908,  905,  909,  906,  910,
      914,  915,  911,  912,  913,  915,  914,  942,  911,  911,
      912,  913,  916,  914,  907,  908,  916,  917,  918,  940,
      943,  949,  950,  951,  954,  915,  956,  914,  915,  911,

      912,  913,  915,  914,  942,  958,  916,  917,  918,  916,
      960,  961,  962,  916,  917,  918,  964,  943,  949,  950,
      951,  954,  915,  956,  965,  966,  967,  969,  971,  973,
      974,  975,  958,  916,  917,  918,  976,  960,  961,  962,
      981,  982,  984,  964,  985,  987,  988,    0,    0,    0,
      986,  965,  966,  967,  969,  971,  973,  974,  975,  986,
      989,  988,  984,  976,  985,  987,  988,  981,  982,  984,
      986,  985,  987,  988,  989,  990,  991,  986,  992,    0,
      989,    0,  994,  991,  994,    0,  986,  989,  988,  984,
        0,  985,  987,  988, 1051,  990,  991,  986,  992,  995,

      993,  989,  990,  991,  994,  992,  995,  989,  993,  994,
      991,  994,  997,  998,  996,    0,  998,  999, 1001,  995,
      993, 1051,  990,  991,    0,  992,  995,  993, 1000,  996,
     1000,  994,  997,  995,  996,  993,  998,  999, 1001,  997,
      998,  996, 1002,  998,  999, 1001,  995,  993, 1003,    0,
     1000, 1004, 1005, 1008,    0, 1000,  996, 1000,    0,  997,
        0,  996, 1002,  998,  999, 1001, 1007, 1006, 1003, 1002,
     1009, 1004, 1005, 1008,    0, 1003, 1006, 1000, 1004, 1005,
     1008, 1007, 1010,    0, 1011, 1012, 1007, 1006, 1054, 1002,
     1009,    0,    0, 1007, 1006, 1003, 1014, 1009, 1004, 1005,

     1008, 1016, 1010, 1006, 1011, 1012, 1013, 1017, 1007, 1010,
     1018, 1011, 1012, 1007, 1006, 1054, 1014, 1009, 1015, 1013,
     1019, 1016, 1015, 1014, 1018,    0, 1013, 1017, 1016, 1010,
     1018, 1011, 1012, 1013, 1017, 1021, 1055, 1018, 1023, 1058,
     1019, 1059, 1015, 1014, 1025, 1015, 1013, 1019, 1016, 1015,
     1026, 1018, 1020, 1013, 1017, 1021, 1022, 1018, 1023, 1020,
     1022, 1024, 1021, 1055, 1025, 1023, 1058, 1019, 1059, 1015,
     1026, 1025, 1020, 1027, 1064, 1065, 1024, 1026, 1068, 1020,
     1022, 1024, 1021, 1022, 1030, 1023, 1020, 1022, 1024,    0,
     1028, 1025, 1028, 1027, 1029, 1031, 1029, 1026, 1030, 1020,

     1027, 1064, 1065, 1024, 1030, 1068, 1032, 1022, 1024, 1031,
     1034, 1030, 1028,    0, 1036, 1031, 1029, 1028, 1033, 1028,
     1027, 1029, 1031, 1029, 1069, 1030, 1032, 1033, 1035, 1072,
     1034, 1030, 1041, 1032, 1036, 1035, 1031, 1034, 1033, 1028,
     1037, 1036, 1031, 1029, 1037, 1033, 1038, 1039, 1035, 1039,
     1038, 1069, 1041, 1032, 1033, 1035, 1072, 1034,    0, 1041,
     1042, 1036, 1035, 1040, 1037, 1033, 1043, 1037, 1044, 1039,
     1038, 1037, 1045, 1038, 1039, 1035, 1039, 1038, 1040, 1041,
     1042, 1073, 1046, 1040, 1076, 1045, 1043, 1042, 1044, 1046,
     1040, 1037, 1045, 1043, 1078, 1044, 1039, 1038, 1079, 1045,

     1080, 1081, 1046, 1085, 1086, 1040, 1087, 1042, 1073, 1046,
     1040, 1076, 1045, 1043, 1088, 1044, 1046, 1089, 1090, 1045,
     1091, 1078, 1093, 1085, 1086, 1079, 1087, 1080, 1081, 1046,
     1085, 1086, 1092, 1087, 1088, 1094, 1092, 1089, 1090,    0,
     1091, 1088, 1093,    0, 1089, 1090, 1095, 1091, 1097, 1093,
     1085, 1086, 1122, 1087, 1098, 1094, 1092, 1096, 1099, 1092,
     1100, 1088, 1094, 1092, 1089, 1090, 1095, 1091, 1097, 1093,
     1103, 1104, 1096, 1095, 1098, 1097, 1124, 1096, 1099, 1122,
     1100, 1098, 1094, 1092, 1096, 1099, 1101, 1100, 1101, 1102,
     1103, 1104,    0, 1095, 1106, 1097, 1102, 1103, 1104, 1096,

     1107, 1098, 1108, 1124, 1096, 1099, 1105, 1100, 1101, 1102,
     1109, 1111, 1112, 1101, 1106, 1101, 1102, 1103, 1104, 1105,
     1107, 1106, 1108, 1102, 1114, 1109, 1105, 1107, 1110, 1108,
     1109, 1111, 1112, 1105, 1110, 1101, 1102, 1109, 1111, 1112,
     1127, 1106, 1116, 1115, 1114, 1113, 1105, 1107, 1110, 1108,
     1116, 1114, 1109, 1105, 1118, 1110, 1115, 1109, 1111, 1112,
     1113, 1110, 1116, 1115, 1117, 1113, 1119, 1127, 1120, 1116,
     1115, 1114, 1113, 1130, 1118, 1110, 1134, 1116, 1135, 1117,
     1136, 1118,    0, 1115, 1117,    0, 1119, 1113, 1120, 1116,
     1115, 1117, 1113, 1119, 1140, 1120, 1139, 1141, 1142, 1143,

     1130, 1118, 1145, 1134, 1157, 1135, 1117, 1136,    0, 1139,
     1146, 1117, 1141, 1119, 1140, 1120, 1139, 1141, 1142, 1143,
     1144, 1140, 1145, 1139, 1141, 1142, 1143,    0, 1148, 1145,
     1146, 1157, 1149, 1150, 1151, 1144, 1139, 1146, 1147, 1141,
     1144, 1140, 1159, 1139, 1141, 1142, 1143, 1144, 1148, 1145,
     1154, 1147, 1149, 1150, 1151, 1148,    0, 1146, 1147, 1149,
     1150, 1151, 1144, 1152, 1153, 1147, 1162, 1144, 1153, 1159,
     1154, 1164, 1164, 1175, 1152, 1148, 1182, 1154, 1147, 1149,
     1150, 1151, 1165, 1152, 1153, 1147, 1166,    0, 1172, 1172,
     1152, 1153, 1168, 1162, 1167, 1153, 1164, 1154, 1169, 1185,

     1175, 1152, 1165, 1182, 1177, 1177, 1166, 1170, 1167, 1165,
     1152, 1153, 1168, 1166, 1167,    0, 1164, 1170, 1169, 1168,
     1178, 1167, 1179, 1164,    0, 1169, 1185, 1170, 1180, 1165,
     1172, 1186, 1188, 1166, 1170, 1167, 1190, 1180, 1192, 1168,
     1178, 1167, 1179, 1164, 1170, 1169, 1177, 1178, 1180, 1179,
     1194, 1186, 1196, 1198, 1170, 1180, 1200, 1172, 1186, 1188,
     1202, 1204, 1206, 1190, 1180, 1192,    0, 1178,    0, 1179,
        0,    0,    0, 1177,    0, 1180,    0, 1194, 1186, 1196,
     1198,    0,    0, 1200,    0,    0,    0, 1202, 1204, 1206,
     1218, 1218, 1218, 1218, 1218, 1219,    0,    0, 1219, 1219,

     1221, 1221, 1221,    0, 1221, 1222,    0, 1222, 1222, 1222,
     1223,    0, 1223, 1223, 1223, 1224,    0, 1224, 1224, 1224,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2160 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2174 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2461 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1218 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1217 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 157:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 164:
#line 230 "flex_lexer.l"
case 165:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 166:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 266 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 267 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 268 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 269 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 270 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 272 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 274 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3421 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1218 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1218 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1217);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 274 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

